SendInfo objects perform an abstract interpretation of a compiled method to ascertain the messages that are self-sent, super-sent and class-sent.

The idea is to simulate the execution of the instruction stream in the compiled method, keeping track of whether the values on the stack are self or some other value.  IN one place we have to keep track of the small integers that are on the stack,  becuase they determine how many elements are to be popped off of the stack.

Everything is fairly straighforward except for jumps.

Conditional forward jumps, as generated by ifTrue: and ifFalse:, are fairly easy.  At the site of the conditional jump, we copy the stack, and use one copy on each path.  When the paths eventually merge, the stacks should be the same size (if they aren't it's a compiler error!).  We build a new stack that has #self on it every place where either of the old stacks had #self.  Thus, expressions like

	(aBoolean ifTrue: self ifFalse: other) foo: 3

that might send foo: 3 to self are recognized.

For unconditional jumps, we save the stack for use at the join point, and continue execution at the instruciton after the jump with an empty stack, which will be immediately overwritten by the stack that comes with the arriving execution.

The bottlenecks in this algorithm turned out to be detecting join points and simulating the stack.  Using an OrderedCollection for a stack caused a lot of redundant work, especially when emptying the stack.  Using a dictionary to detect join points turned out to be very slow, because of the possibility of having to scan through the hash table.

QuickIntegerDictionary and QuickStack provide the same core functionality, but in much more efficient forms.


Use SendInfo as follows:

				(SendInfo on: aCompiledMethod) collectSends

aSendInfo is both an InstructionStream and an InstructionStream client.

Structure:
 stack --	the simulated execution stack
 savedStacks -- The dictionary on which the extra stacks waiting to be merged in are saved.

  sentSelectors		-- an Identity Set accumulating the set of sent selectors.
  superSentSelectors	-- an Identity Set accumulating the set of super sent selectors.

  classSentSelectors -- an Identity Set accumulating the set of selectors sent to self class.
  isStartOfBlock -- a flag indicating that we have found the start of a block, and that the next jump will skip over it.
  numBlockArgs --  
nr1' 'nr2' 'nr3' 'nr4')
