A dependency analysis is instantiated by an SMInstallationTask as a step in calculating how the task can be performed.

The analysis is done using a map and some input - for example a list of package releases that the task wants to get installed. It can then be queried for the results. The analysis is performed in a series of steps and middle results are collected in instvars. It also uses sub instances so the analysis actually forms a tree of several instances of SMDependencyAnalysis where each node describes one level of dependencies.

Instvars:

task - the task that instantiated this analysis.
map - the SMSqueakMap to use, we get it by asking the task.
wantedReleases - the releases that we want to install.
alreadyInstalled - the subset of wantedReleases that are already installed.
trivialToInstall - the subset of wantedReleases that do not have dependencies and can be installed directly.
alreadyInstallable - 	the subset of wantedReleases that do have dependencies but for which at least one configuration is fulfilled and thus the release can already be installed.
trickyReleases - the subset of wantedReleases that do have configurations but none of them are fulfilled, so some dependencies first needs to be installed before these releases can be installed.

workingConfigurations - an OrderedCollection of OrderedCollections holding all working configurations for the trickyReleases.
workingConfigurationsSize - size of workingConfigurations.
combinations - all possible (unordered) combinations of picking one working configuration for each tricky release.
suggestedInstallSetsSet - computed from combinations above. A Set of Sets of required releases. Each Set is a unique combination of the required releases to install in order to fulfill one configuration for each of the tricky releases.
conflictingInstallSetsSet - the subset of suggestedInstallSetsSet that are invalid since it includes multiple releases from the same package.
 