readDataFrom: aDataStream size: anInteger
    "Create an object based on the contents of aDataStream, which was
       generated by the object’s storeDataOn: method. Answer it.
     NOTE: This implementation for DiskProxyQ deals with a subtle issue in reading a
        network of objects. Recursively reading the a DiskProxyQ’s parts will
        internalize them (comeFullyUpOnReload), possibly sending messages to the
        nascent DiskProxyQ. I.e. the incomplete object receives (and enqueues)
        messages! When we read the DiskProxyQ’s message queue, we must combine
        it with the accumulated queue.
     ASSUMES: Rather than hard-wire the index of the inst var ‘messageQueue’, we
        assume that any non-nil inst var has an Array to be concatenated with the
        filed value.
     NOTE: This method must match its corresponding storeDataOn:
       method. Also, it must send beginReference: after instantiating
       the new object but before reading any objects from aDataStream
       that might reference it. -- 12/1/92 jhm"
    | anObject cntInstVars cntIndexedVars nextValue var |

    cntInstVars _ self instSize.
    anObject _ self isVariable
        ifTrue:  [cntIndexedVars _ anInteger - cntInstVars.
                 self basicNew: cntIndexedVars]
        ifFalse: [cntIndexedVars _ 0.
                 self basicNew].

    aDataStream beginReference: anObject.

    "Read in the instance vars, but don’t just overwrite vars that get contents
     before we get there due to recursive work in ‘aDataStream next’."
    1 to: cntInstVars do: [:i |
        nextValue _ aDataStream next.
        (var _ anObject instVarAt: i) == nil
            ifTrue:     "the normal case"
                [anObject instVarAt: i put: nextValue]
            ifFalse:    "Oops! Recover: Concatenate nextValue and var Arrays."
                [nextValue == nil
                    ifFalse: [anObject instVarAt: i put: (nextValue,, var)]]].

    "Read in the indexed vars."
    1 to: cntIndexedVars do:
        [:i | anObject basicAt: i put: aDataStream next].

    ^ anObject