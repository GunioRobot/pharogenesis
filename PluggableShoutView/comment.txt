I am a subclass of PluggableTextView.

Instances of me are usually created using my #on:text:accept:readSelection:menu: class method.

In order to colour the text, I use an instance of SHTextStylerST80, which I store in my 'styler' instance variable.

When my #editString: method is called, I use the styler to ...
	a) optionally set all assignments to ansi or leftArrow in my text. 
	b) Colour my text (immediately, if the text is less than 4096 chars in length, or in a backgroundProcess otherwise)

	When my text is changed, my #hasUnacceptedEdits: method is called with true, and I ask my styler to re-colour my text. This is performed in a background process so that typing remains responsive regardless of the length of the text.

	Just before my styler is about to format/style the text, I send #stylerAboutToStyle:  to my model. This gives my model a chance to veto the styling (by answering false), or to initialize the styler with information it needs in order to parse the text correctly (e.g. the class to which a method belongs, or the workspace in which I am contained).

	My styler informs me that it has finished styling by triggering the #stylerStyled: and #stylerStyledInBackground: events which I handle. I then update the textAttributes of my text and refresh the display.
 
	My 'unstyledAcceptText' instance variable is used in conjunction with my #correctFrom:to:with: method to ensure that when my text is modified during a method compilation (removing unused vars etc), I do not lose those changes.
	