I represent a generic indexed face mesh. My subclasses define what kind of polygones I use to approximate the surface to be modelled.
 
An indexed mesh approximates the surface of a body in three-dimensional space. It uses a collection of spacial points (the vertices) and a collection of so-called faces.
 
Use of my instance variables:

vertices (mandatory)
instance of B3DVector3Array. Elements are instance of B3DVector3, the spacial points of the mesh. 

faces (mandatory)
instance of B3DIndexedQuadArray for a B3DIndexedQuadMesh, instance of B3DIndexedTriangleArray for a B3DIndexedTriangleMesh The elements are Quads (Triangles). A Quad contains four indices from collection vertices, a triangle contains three indices.

vtxColors (optional)
nil or an instance of B3DColor4Array. That array defines a color (instance of B3DColor4) for every point in vertices. These colors are used for surface coloring.


vtxTexCoords (optional)
nil or an instance of B3DTexture2Array. That array defines a texture coordinate for every point in vertices. The texture itself is not part of the mesh; it is an element of the geometric object.

vtxNormals (optional)
a collection of vertex normals. Vertext normals are needed for surface coloring with lights. Normal vertices are automatically computed when they are needed, but not given. For quadrangle meshes, it is generally better to individually compute vertex normals when they are needed for surface coloring with lights.

faceNormals (optional)
a collection of face normals. Face normals are automatically computed when they are needed, but not given.

bBox (automatically computed)
the bounding box of the modelled solid.



