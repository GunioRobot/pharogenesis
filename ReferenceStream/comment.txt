ReferenceStream comment:
'This is an interim save-to-disk facility. A ReferenceStream can store
one or more objects in a persistent form, including sharing and
cycles. Cf. DataStream.

Here is the way to use DataStream and ReferenceStream:
	rr _ ReferenceStream fileNamed: ''test.obj''.
	rr nextPut: <your object>.
	rr close.

To get it back:
	rr _ ReferenceStream fileNamed: ''test.obj''.
	<your object> _ rr next.
	rr close.

ReferenceStreams can now write "weak" references. nextPutWeak:
writes a "weak" reference to an object, which refers to that object
*if* it also gets written to the stream by a normal nextPut:.

Public messages:
	reset
Public inherited messages (see DataStream)
	(class) on:
	(class) fileNamed:
	(class) fileTypeCode
	atEnd
	beginInstance:size: (for use by storeDataOn: methods)
	beginReference: (for use by readDataFrom:size: methods)
	close
	next
	next:
	nextPut:
	nextPutAll:
	nextPutWeak:
	setType:
	shorten
	size

NOTE: A ReferenceStream should be treated as a read-stream *or* as a
write-stream, *not* as a read/write-stream. The reference-remembering
mechanism would probably do bad things if you tried to read and write
from the same ReferenceStream.

[TBD] Should we override "close" to do
	self forgetReferences. super close?

Instance variables
 references -- an IdentityDictionary mapping objects already written
	to their byteStream positions. If asked to write any object a
	second time, we just write a reference to its stream position.
	This handles shared objects and reference cycles between objects.
	To implement "weak references" (for Aliases), the references
	dictionary also maps objects not (yet?) written to a Collection
	of byteStream positions with hopeful weak-references to it. If
	asked to definitely write one of these objects, we''ll fixup those
	weak references.
 objects -- an IdentityDictionary mapping relative byte stream positions to
	objects already read in. If asked to follow a reference, we
	return the object already read.
	This handles shared objects and reference cycles between objects.
 currentReference -- the current reference position. Positon relative to the 
	start of object data in this file.  (Allows user to cut and paste smalltalk 
	code from the front of the file without effecting the reference values.)  
	This variable is used to help install each new object in "objects" as soon
	as it''s created, **before** we start reading its contents, in
	case any of its content objects reference it.
 fwdRefEnds -- A weak reference can be a forward reference, which
	requires advance-reading the referrent. When we later come to the
	object, we must get its value from "objects" and not re-read it so
	refs to it don''t become refs to copies. fwdRefEnds remembers the
	ending byte stream position of advance-read objects.
 transients -- an IdentitySet of byte stream positions corresponding
	to objects that we''ve started to read in (and already added to
	"objects" in case of reference cycles) but haven''t yet handed out
	OOPs for. If we hand out an OOP to one of these interim OOPs, and
	if internalizing it (comeFullyUpOnReload) returns a different OOP,
	then we must ask it to #become: the new OOP. Tracking the interim
	OOPs handed out lets us save most calls to (costly) #become:.
-- 11/17/92 jhm
'